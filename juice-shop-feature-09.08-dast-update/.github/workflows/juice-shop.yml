name: Juice Shop CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: your-dockerhub-username/juice-shop
  TEST_SERVER_IP: 35.180.67.168
  DEPLOY_USER: your_angoweb_user
  DEPLOY_PASS: ${{ secrets.ANGOWEB_PASS }}
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependencies
        run: yarn install

  test:
    runs-on: ubuntu-latest
    needs: [cache]
    steps:
      - uses: actions/checkout@v4
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Run tests
        run: |
          yarn install
          yarn test

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --verbose --source . -f json -r gitleaks.json
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks.json

  njsscan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install njsscan
        run: pip install njsscan
      - name: Run njsscan
        run: njsscan --exit-warning . --sarif -o njsscan.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: njsscan-report
          path: njsscan.sarif

  semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: returntocorp/semgrep-action@v1
        with:
          config: p/javascript
          output: semgrep.json
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep.json

  retirejs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install RetireJS
        run: npm install -g retire
      - name: Run RetireJS
        run: retire --path . --outputformat json --outputpath retire.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: retire-report
          path: retire.json

  build_image:
    runs-on: ubuntu-latest
    needs: [test, gitleaks, njsscan, semgrep, retirejs]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to DockerHub
        run: echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER --password-stdin
      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .
      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

  trivy:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - name: Pull image
        run: docker pull $IMAGE_NAME:${{ github.sha }}
      - name: Scan image with Trivy
        run: trivy image -f json -o trivy.json --severity HIGH,CRITICAL --exit-code 1 $IMAGE_NAME:${{ github.sha }} || true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy.json

  deploy_test:
    runs-on: ubuntu-latest
    needs: [trivy]
    steps:
      - name: Deploy to test server (AngoWeb)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.TEST_SERVER_IP }}
          username: ${{ env.DEPLOY_USER }}
          password: ${{ env.DEPLOY_PASS }}
          script: |
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN
            docker pull $IMAGE_NAME:latest
            docker stop juice-shop || true
            docker rm juice-shop || true
            docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest

  zap_baseline:
    runs-on: ubuntu-latest
    needs: [deploy_test]
    container:
      image: zaproxy/zap-stable
    env:
      ZAP_TARGET: http://${{ env.TEST_SERVER_IP }}:3000
    steps:
      - name: ZAP Baseline Scan
        run: |
          mkdir -p /zap/wrk
          zap-baseline.py -t $ZAP_TARGET -g gen.conf -I -x baseline.xml
      - uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: /zap/wrk/baseline.xml

  zap_full:
    runs-on: ubuntu-latest
    needs: [deploy_test]
    container:
      image: zaproxy/zap-stable
    env:
      ZAP_TARGET: http://${{ env.TEST_SERVER_IP }}:3000
    steps:
      - name: ZAP Full Scan
        run: |
          mkdir -p /zap/wrk
          zap-full-scan.py -t $ZAP_TARGET -g gen.conf -I -x zap.xml
      - uses: actions/upload-artifact@v4
        with:
          name: zap-full-report
          path: /zap/wrk/zap.xml

  deploy_prod:
    runs-on: ubuntu-latest
    needs: [zap_full]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to production (manual approval)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PASS }}
          script: |
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN
            docker pull $IMAGE_NAME:latest
            docker stop juice-shop || true
            docker rm juice-shop || true
            docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest
