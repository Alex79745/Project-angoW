name: Frontend + Backend CI/CD with Security, Deploy & ZAP Scans

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  BACKEND: ${{ vars.BACKEND }}
  FRONTEND: ${{ vars.FRONTEND }}


jobs:
  # --------------------------------------------------------
  # 1Ô∏è‚É£ INSTALL DEPENDENCIES AND CACHE (to speed up builds)#
  # --------------------------------------------------------
  create_cache:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/dockerfiles/backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: yarn install
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

  # --------------------------------------------------------
  # 2Ô∏è‚É£ UNIT TESTS
  # --------------------------------------------------------
  yarn_test:
    runs-on: ubuntu-latest
    needs: create_cache
    defaults:
      run:
        working-directory: app/dockerfiles/frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: yarn install
      - name: Run unit tests
        run: yarn test
      - name: Install dev dependencies
        run: yarn add --dev jest


  # --------------------------------------------------------
  # 3Ô∏è‚É£ SECURITY SCANS (STATIC ANALYSIS)
  # --------------------------------------------------------
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetch full history for Gitleaks
      - name: Secret Scanning with Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: "--verbose --redact --source . -f json -r gitleaks.json --commit=HEAD"
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks.json
          path: gitleaks.json


  njsscan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install njsscan
        run: pip install njsscan
      - name: Run njsscan (Node.js vulnerability scan)
        run: njsscan --exit-warning . --sarif -o njsscan.sarif
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: njsscan.sarif
          path: njsscan.sarif

  semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Static code analysis (Semgrep)
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/javascript"
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep.json
          path: semgrep.json

  retire:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install Retire.js
        run: npm install -g retire
      - name: Run Retire.js (dependency vulnerability scan)
        run: retire --path . --outputformat json --outputpath retire.json
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: retire.json
          path: retire.json

  # --------------------------------------------------------
  # 4Ô∏è‚É£ BUILD FRONTEND & BACKEND DOCKER IMAGES
    # --------------------------------------------------------
  build-frontend:
    runs-on: ubuntu-latest
    needs: [yarn_test, gitleaks, njsscan, semgrep, retire]
    defaults:
      run:
        working-directory: app/dockerfiles/frontend
    steps:
      - uses: actions/checkout@v4
      - name: Build frontend Docker image
        run: | 
          # Safe Docker tag: SHA + branch name, replace invalid chars
          SAFE_TAG=$(echo "frontend-app-${GITHUB_REF##*/}-${GITHUB_SHA::7}" | tr / _)
          docker build -f Dockerfile.frontend -t $FRONTEND:$SAFE_TAG -t $FRONTEND:latest .
          echo "SAFE_TAG=$SAFE_TAG" >> $GITHUB_ENV

      - name: Push $FRONTEND to DockerHub
        run: |
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          docker push $FRONTEND:$SAFE_TAG
          docker push $FRONTEND:latest

  build-backend:
    runs-on: ubuntu-latest
    needs: [yarn_test, gitleaks, njsscan, semgrep, retire]
    defaults:
      run:
        working-directory: app/dockerfiles/backend
    steps:
      - uses: actions/checkout@v4
      - name: Build backend Docker image
        run: |
          SAFE_TAG=$(echo "backend-app-${GITHUB_REF##*/}-${GITHUB_SHA::7}" | tr / _)
          docker build -f Dockerfile.backend -t $BACKEND:$SAFE_TAG -t $BACKEND:latest .
          echo "SAFE_TAG=$SAFE_TAG" >> $GITHUB_ENV

      - name: Push $BACKEND to DockerHub
        run: |
          echo "$SAFE_TAG"
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          docker push $BACKEND:$SAFE_TAG
          docker push $BACKEND:latest

  # --------------------------------------------------------
  # 5Ô∏è‚É£ TRIVY IMAGE SECURITY SCAN
  # --------------------------------------------------------
  trivy:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb stable main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Docker login (for private images)
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Scan Docker images with Trivy
        run: |
          echo "üîç Scanning frontend image..."
          trivy image --exit-code 1 --severity HIGH,CRITICAL -f json -o trivy-frontend.json $FRONTEND:latest

          echo "üîç Scanning backend image..."
          trivy image --exit-code 1 --severity HIGH,CRITICAL -f json -o trivy-backend.json $BACKEND:latest

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-frontend.json
            trivy-backend.json


  # --------------------------------------------------------
  # 6Ô∏è‚É£ DEPLOY TO ANGO WEB VM (TEST ENV)
  # --------------------------------------------------------
  deploy_test:
    runs-on: ubuntu-latest
    needs: [trivy]
    steps:
      - name: Deploy Docker containers to AngoWeb test VM
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.TEST_SERVER_IP }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASS }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull $FRONTEND_IMAGE:latest
            docker pull $BACKEND_IMAGE:latest

            docker stop frontend-app || true && docker rm frontend-app || true
            docker stop backend-app || true && docker rm backend-app || true

            docker run -d --name frontend-app -p 80:80 $FRONTEND_IMAGE:latest
            docker run -d --name backend-app -p 3000:3000 $BACKEND_IMAGE:latest

  # --------------------------------------------------------
  # 7Ô∏è‚É£ ZAP SCANS (BASELINE & FULL DAST)
  # --------------------------------------------------------
  zap_baseline:
    runs-on: ubuntu-latest
    needs: [deploy_test]
    steps:
      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: "http://${{ secrets.TEST_SERVER_IP }}"
      - uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: report_html.html

  zap_full:
    runs-on: ubuntu-latest
    needs: [deploy_test]
    steps:
      - name: Run ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: "http://${{ secrets.TEST_SERVER_IP }}"
      - uses: actions/upload-artifact@v4
        with:
          name: zap-full-report
          path: report_html.html

  # --------------------------------------------------------
  # 8Ô∏è‚É£ MANUAL APPROVAL & PRODUCTION DEPLOYMENT
  # --------------------------------------------------------
  deploy_prod:
    runs-on: ubuntu-latest
    needs: [zap_full]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Manual Approval Notice
        run: echo "Deploying to production after manual approval..."
      - name: Deploy to production VM
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PASS }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull $FRONTEND_IMAGE:latest
            docker pull $BACKEND_IMAGE:latest

            docker stop frontend-prod || true && docker rm frontend-prod || true
            docker stop backend-prod || true && docker rm backend-prod || true

            docker run -d --name frontend-prod -p 80:80 $FRONTEND_IMAGE:latest
            docker run -d --name backend-prod -p 3000:3000 $BACKEND_IMAGE:latest


            docker run -d --name frontend-prod -p 80:80 $FRONTEND_IMAGE:latest
            docker run -d --name backend-prod -p 3000:3000 $BACKEND_IMAGE:latest


